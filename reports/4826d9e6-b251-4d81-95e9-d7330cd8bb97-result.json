{"name": "test_logo_click", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=128.0.6613.138)\nStacktrace:\n\tGetHandleVerifier [0x00007FF6E01E9412+29090]\n\t(No symbol) [0x00007FF6E015E239]\n\t(No symbol) [0x00007FF6E001B1DA]\n\t(No symbol) [0x00007FF6DFFEFAF5]\n\t(No symbol) [0x00007FF6E009E2C7]\n\t(No symbol) [0x00007FF6E00B5EB1]\n\t(No symbol) [0x00007FF6E0096493]\n\t(No symbol) [0x00007FF6E00609D1]\n\t(No symbol) [0x00007FF6E0061B31]\n\tGetHandleVerifier [0x00007FF6E050871D+3302573]\n\tGetHandleVerifier [0x00007FF6E0554243+3612627]\n\tGetHandleVerifier [0x00007FF6E054A417+3572135]\n\tGetHandleVerifier [0x00007FF6E02A5EB6+801862]\n\t(No symbol) [0x00007FF6E016945F]\n\t(No symbol) [0x00007FF6E0164FB4]\n\t(No symbol) [0x00007FF6E0165140]\n\t(No symbol) [0x00007FF6E015461F]\n\tBaseThreadInitThunk [0x00007FFAF746257D+29]\n\tRtlUserThreadStart [0x00007FFAF8B4AF28+40]", "trace": "setup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"e85632c672f4e608b2099fa9f3c3aa62\")>\n\n    def test_logo_click(setup):\n        top_section = TopSection(setup)\n        top_section.click_logo()\n>       assert \"www.kalbela.com\" in setup.current_url\n\ntests\\test_top_section.py:26: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:444: in current_url\n    return self.execute(Command.GET_CURRENT_URL)[\"value\"]\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000022165C92C30>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...07FF6E015461F]\\\\n\\\\tBaseThreadInitThunk [0x00007FFAF746257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFAF8B4AF28+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=128.0.6613.138)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6E01E9412+29090]\nE       \t(No symbol) [0x00007FF6E015E239]\nE       \t(No symbol) [0x00007FF6E001B1DA]\nE       \t(No symbol) [0x00007FF6DFFEFAF5]\nE       \t(No symbol) [0x00007FF6E009E2C7]\nE       \t(No symbol) [0x00007FF6E00B5EB1]\nE       \t(No symbol) [0x00007FF6E0096493]\nE       \t(No symbol) [0x00007FF6E00609D1]\nE       \t(No symbol) [0x00007FF6E0061B31]\nE       \tGetHandleVerifier [0x00007FF6E050871D+3302573]\nE       \tGetHandleVerifier [0x00007FF6E0554243+3612627]\nE       \tGetHandleVerifier [0x00007FF6E054A417+3572135]\nE       \tGetHandleVerifier [0x00007FF6E02A5EB6+801862]\nE       \t(No symbol) [0x00007FF6E016945F]\nE       \t(No symbol) [0x00007FF6E0164FB4]\nE       \t(No symbol) [0x00007FF6E0165140]\nE       \t(No symbol) [0x00007FF6E015461F]\nE       \tBaseThreadInitThunk [0x00007FFAF746257D+29]\nE       \tRtlUserThreadStart [0x00007FFAF8B4AF28+40]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: NoSuchWindowException"}, "start": 1726636156650, "stop": 1726636229286, "uuid": "cffe64b1-4d2a-4bd2-a54a-cddd678453b7", "historyId": "4a9996984269425621ec638b52d34c17", "testCaseId": "4a9996984269425621ec638b52d34c17", "fullName": "tests.test_top_section#test_logo_click", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_top_section"}, {"name": "host", "value": "DESKTOP-MUDSLPJ"}, {"name": "thread", "value": "10304-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_top_section"}]}